#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// --- Configuração dos Pinos ---
// Sensor Ultrassônico HC-SR04
const int TRIG_PIN = 12;
const int ECHO_PIN = 14;

// Display OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Barra de LEDs
const int PRIMEIRO = 2;
const int SEGUNDO = 4;
const int TERCEIRO = 5;
const int QUARTO = 15;
const int QUINTO = 16;

// Botão
const int BUTTON_PIN = 19;

// --- Variáveis Globais ---
long duration;
int currentDistance;
int savedDistance = -1; // -1 indica que nenhuma medição foi salva ainda

void setup() {
  Serial.begin(115200);

  // Inicializa o display OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("Falha ao iniciar SSD1306"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Medidor de Distancia");
  display.display();
  delay(1000);

  // Configura os pinos do sensor
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Configura os pinos dos LEDs
  pinMode(PRIMEIRO, OUTPUT);
  pinMode(SEGUNDO, OUTPUT);
  pinMode(TERCEIRO, OUTPUT);
  pinMode(QUARTO, OUTPUT);
  pinMode(QUINTO, OUTPUT);

  // Configura o pino do botão com resistor interno de pull-up
  pinMode(BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
  // 1. Medir a distância com o HC-SR04
  measureDistance();

  // 2. Atualizar a barra de LEDs com base na distância
  updateLedBar();

  // 3. Verificar se o botão foi pressionado para gravar a medição
  handleButton();

  // 4. Exibir as informações no display OLED
  updateOLED();

  delay(200); // Pequena pausa para estabilidade
}

void measureDistance() {
  // Limpa o pino de trigger
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);

  // Envia um pulso de 10 microssegundos
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Lê o tempo de retorno do pulso no pino echo (com timeout de 30ms)
  duration = pulseIn(ECHO_PIN, HIGH, 30000);

  if (duration == 0) {
    currentDistance = -1; // sem leitura
  } else {
    // Calcula a distância em centímetros
    currentDistance = duration * 0.0343 / 2;
  }
}

void updateLedBar() {

  if (currentDistance > 0 && currentDistance <= 15) {
    digitalWrite(PRIMEIRO, HIGH);
    digitalWrite(SEGUNDO, LOW);
    digitalWrite(TERCEIRO, LOW);
    digitalWrite(QUARTO, LOW);
    digitalWrite(QUINTO, LOW);

  } else if (currentDistance > 15 && currentDistance <= 50) {
    digitalWrite(PRIMEIRO, HIGH);
    digitalWrite(SEGUNDO, HIGH);
    digitalWrite(TERCEIRO, HIGH);
    digitalWrite(QUARTO, LOW);
    digitalWrite(QUINTO, LOW);

  } else if (currentDistance > 50) {
    digitalWrite(PRIMEIRO, HIGH);
    digitalWrite(SEGUNDO, HIGH);
    digitalWrite(TERCEIRO, HIGH);
    digitalWrite(QUARTO, HIGH);
    digitalWrite(QUINTO, HIGH);

  }
}


void handleButton() {
  // Botão com INPUT_PULLUP → pressionado = LOW
  if (digitalRead(BUTTON_PIN) == LOW) {
    savedDistance = currentDistance;
    delay(200); // debounce simples
  }
}

void updateOLED() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);

  // Exibe a distância atual
  display.setCursor(0, 0);
  display.print("Distancia Atual:");

  display.setTextSize(2);
  display.setCursor(20, 15);

  if (currentDistance > 0) {
    display.print(currentDistance);
    display.print(" cm");
  } else {
    display.print("---");
  }

  // Exibe a última medição salva, se houver
  if (savedDistance != -1) {
    display.setTextSize(1);
    display.setCursor(0, 45);
    display.print("Ultima medicao:");
    display.print(savedDistance);
    display.print(" cm");
  }

  display.display();
}

